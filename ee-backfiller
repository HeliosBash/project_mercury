#!/bin/bash

while [ $# -gt 0 ] ; do
	case "$1" in
		--node*|-n*)
			if [[ "$1" != *=* ]]; then shift; fi
			node="${1#*=}"
			;;
		--sourceid*|-i*)
			if [[ "$1" != *=* ]]; then shift; fi
			sid="${1#*=}"
			;;
		--timezone*|-z*)
			if [[ "$1" != *=* ]]; then shift; fi
                    	timezone="${1#*=}"
                    	;;
		--startdatetime*|-s*)
			if [[ "$1" != *=* ]]; then shift; fi
			startdatetime="${1#*=}"
			;;
		--enddatetime*|-e*)
			if [[ "$1" != *=* ]]; then shift; fi
			enddatetime="${1#*=}"
			;;
		--latitude*|-a*)
			if [[ "$1" != *=* ]]; then shift; fi
			lat="${1#*=}"
			;;
		--longitude*|-o*)
			if [[ "$1" != *=* ]]; then shift; fi
			long="${1#*=}"
			;;
		--energyspike*|-g*)
			if [[ "$1" != *=* ]]; then shift; fi
			energyspike="${1#*=}"
			;;
		--api*|-p*)
			if [[ "$1" != *=* ]]; then shift; fi
			solcast_api_token="${1#*=}"
			;;
		--token*|-k*)
			if [[ "$1" != *=* ]]; then shift; fi
			token="${1#*=}"
			;;
		--secret*|-c*)
			if [[ "$1" != *=* ]]; then shift; fi
			secret="${1#*=}"
			;;
		--help|-h)
			echo -n "Usage: ee-backfiller [--help|-h] --node|-n [NODE] --sourceid|-i [SOURCE ID] --timezone|-z [TIMEZONE]"
			echo -n "--startdate|-s [STARTDATETIME in \"YYYY-MM-DD HH:MM\"] --enddatetime|-e [ENDDATETIME "
			echo -n "in \"YYYY-MM-DD HH:MM\"] --latitude|-a [LATITUDE] --longitude|-o [LONGITUDE] "
			echo -n "--energyspike|-g [ENERGY SPIKE IN KWH] --api|-p [SOLCAST API TOKEN] --token|-k "
			echo "[SOLNET TOKEN] --secret|-c [SOLNET SECRET]" 
			exit 0
			;;
		*)
			>&2 echo -n "Error: The following arguments are required --node --sourceid --timezone --startdatetime "
			echo "--enddatetime --latitude --longitude --energyspike --api --token --secret"
			exit 1
			;;
	esac
	shift
done

if [[ -z "$node" || -z "$sid" || -z "$timezone" || -z "$startdatetime" || -z "$enddatetime" || -z "$lat" || -z "$long" || -z "$energyspike" \
	|| -z "$solcast_api_token" || -z "$token" || -z "$secret" ]] ; then

        echo -n "Error: The following arguments are required --node --sourceid --timezone --startdatetime --enddatetime --latitude "
	echo "--longitude --energyspike --api --token --secret" | tee -a $log_path

else
	echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executed: /bin/bash ee-backfiller --node $node --sourceid $sid --timezone " | tee -a $log_path
        echo "$timezone --startdatetime \"$startdatetime\" --enddatetime \"$enddatetime\" --latitude $lat --longitude $long " | tee -a $log_path
        echo "--energyspike $energyspike --api $solcast_api_token --token $token --secret $secret" | tee -a $log_path

	sourceids=$(echo $sid | sed "s/\//%2F/g")
        log_path="logs/ee-backfiller.log"
        maxoutput=1000000

        # Check timezone format if its valid

        check_timezone=$(awk '/^Z/ { print $2 }; /^L/ { print $timezone }' /usr/share/zoneinfo/tzdata.zi | grep -w $timezone)

        while [ -z "$check_timezone" ]
        do
                echo -n "$(date +'%Y-%m-%d %H:%M:%S') Not a valid timezone. Enter timezone:  "
                read timezone < /dev/tty
                check_timezone=$(awk '/^Z/ { print $2 }; /^L/ { print $timezone }' /usr/share/zoneinfo/tzdata.zi | grep -w $timezone)
        done

	localstartdate=$(TZ=$timezone date -d "$startdatetime" )
        localenddate=$(TZ=$timezone date -d "$enddatetime" )

        utcstartdate=$(TZ=UTC date -d "$localstartdate" +'%Y-%m-%d %H:%M:%SZ')
        utcenddate=$(TZ=UTC date -d "$localenddate" +'%Y-%m-%d %H:%M:%SZ')

	startdate=$(echo $utcstartdate | sed 's/ /T/g;s/:/%3A/g')
        enddate=$(echo $utcenddate | sed 's/ /T/g;s/:/%3A/g')

        echo "$(date +'%Y-%m-%d %H:%M:%S') Local : $localstartdate" 2>&1 | tee -a $log_path
        echo "$(date +'%Y-%m-%d %H:%M:%S') UTC   : $utcstartdate" 2>&1 | tee -a $log_path
        echo "$(date +'%Y-%m-%d %H:%M:%S') UTC Formatted : $startdate" 2>&1 | tee -a $log_path
        echo "$(date +'%Y-%m-%d %H:%M:%S') Local : $localenddate" 2>&1 | tee -a $log_path
        echo "$(date +'%Y-%m-%d %H:%M:%S') UTC   : $utcenddate" 2>&1 | tee -a $log_path
        echo "$(date +'%Y-%m-%d %H:%M:%S') UTC Formatted : $enddate" 2>&1 | tee -a $log_path

        echo "$(date +'%Y-%m-%d %H:%M:%S') Checking for any data in specified date range " 2>&1 | tee -a $log_path
        echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_query.py --node=\"$node\" --sourceids=\"$sourceids\" " | tee -a $log_path
        echo -n "--startdate=\"$startdate\" --enddate=\"$enddate\" --aggregate=\"None\" --maxoutput=\"$maxoutput\" " | tee -a $log_path
        echo "--token=\"$token\" --secret=\"$secret\"" | tee -a $log_path

        # Checks date range for any existing datum and aborts if there are any
        >data/${node}_${sourceids}_${startdate}_${enddate}_datum

	python3 solnet_query.py --node="$node" --sourceids="$sourceids" --startdate="$startdate" --enddate="$enddate" --aggregate="None" \
		--maxoutput="$maxoutput" --token="$token" --secret="$secret" 2>&1 | tee -a data/${node}_${sourceids}_${startdate}_${enddate}_datum


        datum_count=$(sed '1d'  data/${node}_${sourceids}_${startdate}_${enddate}_datum | wc -l)


	if [[ "$(cat data/${node}_${sourceids}_${startdate}_${enddate}_datum)" == *"Error"* ]] ; then
                echo -n "$(date +'%Y-%m-%d %H:%M:%S') " | tee -a $log_path
                cat data/${node}_${sourceids}_${startdate}_${enddate}_datum 2>&1 | tee -a $log_path
		echo -n "Usage: ee-backfiller [--help|-h] --node|-n [NODE] --sourceid|-i [SOURCE ID] --timezone|-z [TIMEZONE]"
                echo -n "--startdate|-s [STARTDATETIME in \"YYYY-MM-DD HH:MM\"] --enddatetime|-e [ENDDATETIME "
                echo -n "in \"YYYY-MM-DD HH:MM\"] --latitude|-a [LATITUDE] --longitude|-o [LONGITUDE] "
                echo -n "--energyspike|-g [ENERGY SPIKE IN KWH] --api|-p [SOLCAST API TOKEN] --token|-k "
                echo "[SOLNET TOKEN] --secret|-c [SOLNET SECRET]"

        else

		if [ $datum_count -gt 0 ]; then

                        formatted_localstartdate=$(date -d "$localstartdate" +'%Y-%m-%d %H:%M:%S')
                        formatted_localenddate=$(date -d "$localenddate" +'%Y-%m-%d %H:%M:%S')

                        echo "$(date +'%Y-%m-%d %H:%M:%S') Datum count in gap is greater than 0. Preview and " | tee -a $log_path
                        echo "Confirm commands below will be executed:" | tee -a $log_path
                        echo -n "Preview: python3 solnet_expire_preview.py --node=\"$nodeId\" " | tee -a $log_path
                        echo -n "--sourceids=\"$sourceids\" --localstartdate=\"$formatted_localstartdate\" " | tee -a $log_path
                        echo "--localenddate=\"$formatted_localenddate\" --token=\"$token\" --secret=\"$secret\"" | tee -a $log_path
                        echo -n "Confirm: python3 solnet_expire_confirm.py --node=\"$nodeId\" " | tee -a $log_path
                        echo -n "--sourceids=\"$sourceids\" --localstartdate=\"$formatted_localstartdate\" " | tee -a $log_path
                        echo "--localenddate=\"$formatted_localenddate\" --token=\"$token\" --secret=\"$secret\"" | tee -a $log_path

                        while true
                        do

                                echo -n "$(date +'%Y-%m-%d %H:%M:%S') Would you like to remove the data between" | tee -a $log_path
                                echo "the gap now now (Y/N)?" | tee -a $log_path
                                read continue_result < /dev/tty

                                if [[ "${continue_result^^}" == "Y" || "${continue_result^^}" == "N" ]] ; then
                                        echo "$(date +'%Y-%m-%d %H:%M:%S') Continue Result recevied $continue_result" 2>&1 | tee -a $log_path
                                        break;
                                fi
                        done


			if [[ "${continue_result^^}" == "Y" ]] ; then

                                echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_expire_preview.py "
                                echo -n "--node=\"$nodeId\" --sourceids=\"$sourceids\" " | tee -a $log_path
                                echo -n "--localstartdate=\"$formatted_localstartdate\" " | tee -a $log_path
                                echo -n "--localenddate=\"$formatted_localenddate\" " | tee -a $log_path
                                echo "--token=\"$token\" --secret=\"$secret\"" | tee -a $log_path

                                result_count=$(python3 solnet_expire_preview.py --node="$nodeId" --sourceids="$sourceids" \
                                        --localstartdate="$formatted_localstartdate" --localenddate="$formatted_localenddate" \
                                        --token="$token" --secret="$secret")

                                echo "$(date +'%Y-%m-%d %H:%M:%S') COUNT RESULT = $result_count" 2>&1 | tee -a $log_path

                                if [ $result_count -ne $gap_count ] ; then
                                        echo -n "$(date +'%Y-%m-%d %H:%M:%S') Skipping Process. Count doesn't match, " | tee -a $log_path
                                        echo "adjust date and run manually" | tee -a $log_path
                                else
                                        echo -n "$(date +'%Y-%m-%d %H:%M:%S') Count of previewed data match count of data " | tee -a $log_path
                                        echo "between date range." 2>&1 | tee -a $log_path

                                        echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_expire_confirm.py " | tee -a $log_path
                                        echo -n "--node=\"$nodeId\" --sourceids=\"$sourceids\" " | tee -a $log_path
                                        echo -n "--localstartdate=\"$formatted_localstartdate\" " | tee -a $log_path
                                        echo -n "--localenddate=\"$formatted_localenddate\" --token=\"$token\"" | tee -a $log_path
                                        echo "--secret=\"$secret\" in 10 seconds. Hit CTRL + C to Cancel" | tee -a $log_path
                                        sleep 10
                                        python3 solnet_expire_confirm.py --node="$nodeId" --sourceids="$sourceids" \
                                                --localstartdate="$formatted_localstartdate" --localenddate="$formatted_localenddate" \
                                                --token="$token" --secret="$secret" 2>&1 | tee -a $log_path

                                        echo -n "$(date +'%Y-%m-%d %H:%M:%S') Execute python3 solnet_manage_jobs.py " | tee -a $log_path
                                        echo -n "--job=\"expire\" --action=\"list\" --token=\"$token\" " | tee -a $log_path
                                        echo "--secret=\"$secret\" to monitor progress" | tee -a $log_path
                                fi

                        else
                                echo "$(date +'%Y-%m-%d %H:%M:%S') Delete Process Aborted" | tee -a $log_path
                        fi
		else
			echo "$(date +'%Y-%m-%d %H:%M:%S') No Data Detected. Preparing Solcast Query Data" | tee -a $log_path
                fi

		# File where the python commands to download solcast data will be stored.
                solcast_script_path="data/${node}_${sourceids}_${lat}_${long}_${startdate}_${enddate}_solcast_script.sh"

                # File where the result of the python commands to download solcast data will be stored.
                solcast_csv_path="data/${node}_${sourceids}_${lat}_${long}_${startdate}_${enddate}_solcast_result.csv"
                >$solcast_script_path

                # UTC date is used as it is  required when downloading solcast data. 
		# Date is converted to epoch to perform aritmethtic operation with the date.
		solcast_start=$utcstartdate
                solcast_end=$utcenddate

                solcast_start_epoch=$(date -d "$solcast_start" +%s)
                solcast_end_epoch=$(date -d "$solcast_end" +%s)

                # Computes the difference between the start and end dates to determine the number of seconds between the date range.
                date_range_diff_seconds=$((solcast_end_epoch - solcast_start_epoch))

                # This condition checks if the date range exceeds the limit of 2592000  seconds which is 30 days
                # since there is a 30 day limit on date range per solcast download.

                if [ $date_range_diff_seconds -gt 2592000  ]; then

                        solcast_partial=$(date --date "$solcast_start + 30 days" +'%Y-%m-%d %H:%M:%SZ')
                        echo "$(date +'%Y-%m-%d %H:%M:%S') Date range exceeds 30 days, creating multiple queries" 2>&1 | tee -a $log_path
                        echo -n "python3 solcast_download.py --latitude=\"$lat\" --longitude=\"$long\" " | tee -a $solcast_script_path
                        echo -n "--startdate=\"$solcast_start\" --enddate=\"$solcast_partial\" " | tee -a $solcast_script_path
                        echo    "--token=\"$solcast_api_token\" > $solcast_csv_path" | tee -a $solcast_script_path

                        prev_solcast_partial=$(date --date "$(date -Iseconds -d "$solcast_partial") + 1 second" +'%Y-%m-%d %H:%M:%SZ')
                        solcast_partial_epoch=$(date -d "$prev_solcast_partial" +%s )
                        date_range_diff_seconds=$((solcast_end_epoch - solcast_partial_epoch))

                        while [ $date_range_diff_seconds -gt 2592000 ]
                        do
                                if [ $date_range_diff_seconds -gt 2592000 ]; then
                                        solcast_partial=$(date --date "$prev_solcast_partial + 30 days" +'%Y-%m-%d %H:%M:%SZ')
                                        echo -n "python3 solcast_download.py --latitude=\"$lat\" " | tee -a $solcast_script_path
                                        echo -n "--longitude=\"$long\" --startdate=\"$prev_solcast_partial\" " | tee -a $solcast_script_path
                                        echo -n "--enddate=\"$solcast_partial\" " | tee -a $solcast_script_path
                                        echo    "--token=\"$solcast_api_token\" >> $solcast_csv_path" | tee -a $solcast_script_path
                                        prev_solcast_partial=$(date --date "$(date -Iseconds -d "$solcast_partial") + 1 second" \
                                                +'%Y-%m-%d %H:%M:%SZ')
                                        solcast_partial_epoch=$(date -d "$prev_solcast_partial" +%s )
                                        date_range_diff_seconds=$((solcast_end_epoch - solcast_partial_epoch))
                                else
                                        prev_solcast_partial=$(date --date "$(date -Iseconds -d "$solcast_partial") + 1 second" \
                                                +'%Y-%m-%d %H:%M:%SZ')
                                        break
                                fi
                        done

                        echo -n "python3 solcast_download.py --latitude=\"$lat\" --longitude=\"$long\" " | tee -a $solcast_script_path
                        echo -n "--startdate=\"$prev_solcast_partial\" --enddate=\"$solcast_end\" " | tee -a $solcast_script_path
                        echo    "--token=\"$solcast_api_token\" >> $solcast_csv_path" | tee -a $solcast_script_path

                else
                        echo -n "python3 solcast_download.py --latitude=\"$lat\" --longitude=\"$long\" " | tee -a $solcast_script_path
                        echo -n "--startdate=\"$solcast_start\" --enddate=\"$solcast_end\" " | tee -a $solcast_script_path
                        echo    "--token=\"$solcast_api_token\" > $solcast_csv_path" | tee -a $solcast_script_path
                fi

		while true
                do
                        echo -n "$(date +'%Y-%m-%d %H:%M:%S') Would you like to proceed to download solcast (Y/N)?" 2>&1 | tee -a $log_path
                        read solcast_continue_result < /dev/tty

                        if [[ "${solcast_continue_result^^}" == "Y" || "${solcast_continue_result^^}" == "N" ]] ; then
                                echo "$(date +'%Y-%m-%d %H:%M:%S') Continue Result recevied $solcast_continue_result" 2>&1 | tee -a $log_path
                        break;
                        fi
                done

                if [[ "${solcast_continue_result^^}" == "Y" ]] ; then
                        echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing /bin/bash $solcast_script_path in 5 seconds. " | tee -a $log_path
			echo "Hit Ctrl + C to Cancel" | tee -a $log_path
                        sleep 5
                        /bin/bash $solcast_script_path
                        echo "$(date +'%Y-%m-%d %H:%M:%S') Process Completed" | tee -a $log_path
                else
                        echo "$(date +'%Y-%m-%d %H:%M:%S') Solcast Data was not downloaded. Process Completed" | tee -a $log_path
                fi


		echo "$(date +'%Y-%m-%d %H:%M:%S') ***********PROCESS 6*************" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Generating Backfill Data" | tee -a $log_path

		a=0
		previous_watthours=0
		total_energy=$energyspike
		runtime=$(date +"%Y%m%d_%H%M%S")
		ghitotal=$( cat $solcast_csv_path | awk -F"," '{sum+=($4)} END {print sum}' )
		electrical_energy_data_path="data/${node}_${sourceids}_EEGAP_SolNetIMport_${runtime}.csv"
		
		echo "$(date +'%Y-%m-%d %H:%M:%S') Total Irrandiace Calculated: $ghitotal" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Total Enery Spike in KWH: $energyspike" | tee -a $log_path

		echo "$(date +'%Y-%m-%d %H:%M:%S') Calculating Backfill Data Driven by Irradiance Data" | tee -a $log_path
		echo "NodeID,SourceID,Date,watts,wattHours" > $electrical_energy_data_path
		while IFS=, read endperiod startperiod period irr
		do
			formatted_startperiod=$(echo $startperiod | sed "s/T/ /g ; s/Z//g")
		        watts=$(echo "scale=8 ; ( $total_energy * ($irr / $ghitotal) * 12 ) * 1000" | bc )
        		watthours=$(echo "scale=8 ; $previous_watthours + ($watts / 12)" | bc )
        		previous_watthours=$watthours
			echo "$node,$sid,$formatted_startperiod,$watts,$watthours" >> $electrical_energy_data_path
		done < $solcast_csv_path

		echo "$(date +'%Y-%m-%d %H:%M:%S') Displaying parts of output file $electrical_energy_data_path" | tee -a $log_path
		head -n 5 $electrical_energy_data_path 2>&1 | tee -a $log_path
		echo "....." | tee -a $log_path
		tail -n 5 $electrical_energy_data_path 2>&1 | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Process completed" | tee -a $log_path

                echo "$(date +'%Y-%m-%d %H:%M:%S') Determining Stitch Parameters" 2>&1 | tee -a $log_path
                startdate_1hour_before=$(date --date "$(date -Iseconds -d "$utcstartdate") - 1 hour" +'%Y-%m-%d %H:%M:%SZ' | \
			sed 's/ /T/g;s/:/%3A/g')
                startdate_5sec_before=$(date --date "$(date -Iseconds -d "$utcstartdate") - 5 seconds" +'%Y-%m-%d %H:%M:%SZ' | \
			sed 's/ /T/g;s/:/%3A/g')
                echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_query.py --node=\"$node\" " | tee -a $log_path
                echo -n "--sourceids=\"$sourceids\"  --startdate=\"$startdate_1hour_before\" " | tee -a $log_path
                echo -n "--enddate=\"$startdate_5sec_before\" --aggregate=\"None\" --maxoutput=\"$maxoutput\" " | tee -a $log_path
		echo "--token=\"$token\" --secret=\"$secret\" to determine SN EVENT 1" | tee -a $log_path

                sne1_datum="data/${node}_${sourceids}_${startdate_1hour_before}_${startdate_5sec_before}_datum"
                python3 solnet_query.py --node="$node" --sourceids="$sourceids" --startdate="$startdate_1hour_before" \
			--enddate="$startdate_5sec_before" --aggregate="None" --maxoutput="$maxoutput" --token="$token" \
			--secret="$secret" > $sne1_datum

                sed -i '1d' $sne1_datum

                if [ -z "$(cat $sne1_datum)" ] ; then
			snevent1_start_end_datetime=$(date --date "$(date -Iseconds -d "$localstartdate") - 5 seconds" +'%b %d, %Y %H:%M:%S')
                        start_watthours=0
                else
			sne1_startlocaldate=$(cat $sne1_datum | tail -n 1 | awk -F ',' '{print $2}' )
			sne1_startlocaltime=$(cat $sne1_datum | tail -n 1 | awk -F ',' '{print $3}' )
			start_watthours=$(cat $sne1_datum | tail -n 1| awk -F ',' '{print $(NF-2)}')
			snevent1_start_end_datetime=$(date --date "$(date -Iseconds -d "$sne1_startlocaldate $sne1_startlocaltime") \
				+ 5 seconds" +'%b %d, %Y %H:%M:%S')
		fi



		startdate_5sec_after=$(date --date "$(date -Iseconds -d "$utcenddate") + 5 seconds" +'%Y-%m-%d %H:%M:%SZ' | sed 's/ /T/g;s/:/%3A/g')
                startdate_1hour_after=$(date --date "$(date -Iseconds -d "$utcenddate") + 1 hour" +'%Y-%m-%d %H:%M:%SZ' | sed 's/ /T/g;s/:/%3A/g')

		echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_query.py --node=\"$node\" " | tee -a $log_path
		echo -n "--sourceids=\"$sourceids\" --startdate=\"$startdate_5sec_after\" --enddate=\"$startdate_1hour_after\" " | tee -a $log_path
                echo -n "--aggregate=\"None\" --maxoutput=\"$maxoutput\" --token=\"$token\" " | tee -a $log_path
		echo "--secret=\"$secret\" to determine SN EVENT 2" | tee -a $log_path 
		
		sne2_datum="data/${node}_${sourceids}_${startdate_5sec_after}_${startdate_1hour_after}_datum"
		python3 solnet_query.py --node="$node" --sourceids="$sourceids" --startdate="$startdate_5sec_after" \
			--enddate="$startdate_1hour_after" --aggregate="None" --maxoutput="$maxoutput" --token="$token" \
			--secret="$secret" > $sne2_datum
		sed -i '1d' $sne2_datum
		
		if [ -z "$(cat $sne2_datum)" ] ; then
			snevent2_start_end_datetime=$(date --date "$(date -Iseconds -d "$localstartdate") + 5 seconds" +'%b %d, %Y %H:%M:%S')
                        end_watthours=0
                else
                        sne2_endlocaldate=$(cat $sne2_datum | head -n 1 | awk -F ',' '{print $2}' )
                        sne2_endlocaltime=$(cat $sne2_datum | head -n 1 | awk -F ',' '{print $3}' )
			end_watthours=$(cat $sne2_datum | head -n 1| awk -F ',' '{print $(NF-2)}')
                        snevent2_start_end_datetime=$(date --date "$(date -Iseconds -d "$sne2_endlocaldate $sne2_endlocaltime") \
				- 5 seconds" +'%b %d, %Y %H:%M:%S')
                fi
		
		inner_start_watthours=$(head -n 2 $electrical_energy_data_path | tail -n 1 | awk -F ',' '{print $NF}')
		inner_end_watthours=$(tail -n 1 $electrical_energy_data_path | awk -F ',' '{print $NF}')

		echo "$(date +'%Y-%m-%d %H:%M:%S') Start Border - BackFill" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Node ID: $node" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Source ID: $sid" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Start datetime: $snevent1_start_end_datetime" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') End datetime: $snevent1_start_end_datetime" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Final reading: $start_watthours" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Start Reading: $inner_start_watthours" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') End Border - BackFill" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Node ID: $node" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Source ID: $sid" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Start datetime: $snevent2_start_end_datetime" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') End datetime: $snevent2_start_end_datetime" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Final reading: $inner_end_watthours" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Start Reading: $end_watthours" | tee -a $log_path

		########################################################################################################################

		echo "$(date +'%Y-%m-%d %H:%M:%S') Compressing output file $electrical_energy_data_path" | tee -a $log_path
		dos2unix  $electrical_energy_data_path
                sleep 1
                xz -k $electrical_energy_data_path


		echo "$(date +'%Y-%m-%d %H:%M:%S') Creating staged data for solnet import" 2>&1 | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Checking size of file" 2>&1 | tee -a $log_path
		filesizebytes=$(ls -l $electrical_energy_data_path | awk '{print $5}')
		filsesizemb=$(($filesizebytes/1048576))

		echo "$(date +'%Y-%m-%d %H:%M:%S') Size of file: $filsesizemb" 2>&1 | tee -a $log_path

		if [ $filsesizemb -lt 20 ] ; then
			compress="disabled"
		else
			electrical_energy_data_path="${electrical_energy_data_path}.xz"
			compress="enabled"
		fi

		echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_import.py --node=\"$node\" " | tee -a $log_path
		echo -n "--sourceids=\"$sourceids\" --timezone=\"UTC\" --compression=\"$compress\" " | tee -a $log_path
		echo "--filepath=\"$electrical_energy_data_path\" --token=\"$token\" --secret=\"$secret\"" | tee -a $log_path
		while true
		do
			echo -n "$(date +'%Y-%m-%d %H:%M:%S') Would You Like To Proceed [Y/N]: "
			read continue_result < /dev/tty

			if [[ "${continue_result^^}" == "Y" || "${continue_result^^}" == "N" ]] ; then
				echo "$(date +'%Y-%m-%d %H:%M:%S') Continue Result recevied $continue_result" | tee -a $log_path
				break;
			fi
		done

		if [[ "${continue_result^^}" == "Y" ]] ; then

			echo "$(date +'%Y-%m-%d %H:%M:%S') Executing in 10 seconds. Hit Ctrl + C to Cancel" | tee -a $log_path
			sleep 10
			jobid=$(python3 solnet_import.py --node="$node" --sourceids="$sourceids" --timezone="UTC" --compression="$compress" \
				--filepath="$electrical_energy_data_path" --token="$token" --secret="$secret")
			echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_manage_jobs.py --job=\"import\" " | tee -a $log_path
			echo -n "--action=\"preview\" --token=\"$token\" --secret=\"$secret\" --jobid=\"$jobid\" " | tee -a $log_path
			echo    "to preview imported data" | tee -a $log_path
			
			python3 solnet_manage_jobs.py --job="import" --action="preview" --token="$token" --secret="$secret" \
				--jobid="$jobid" 2>&1 | tee -a $log_path

			echo -n "$(date +'%Y-%m-%d %H:%M:%S') To apply staged data, python3 solnet_manage_jobs.py " | tee -a $log_path
			echo -n "--job=\"import\" --action=\"confirm\" --token=\"$token\" --secret=\"$secret\" " | tee -a $log_path
			echo    "--jobid=\"$jobid\" will be executed" | tee -a $log_path

			while true
			do
				echo -n "$(date +'%Y-%m-%d %H:%M:%S') Would You Like To Proceed To Apply Staged Data [Y/N]: "
				read confirm_result < /dev/tty

				if [[ "${confirm_result^^}" == "Y" || "${confirm_result^^}" == "N" ]] ; then
				echo "$(date +'%Y-%m-%d %H:%M:%S') Confirm Result recevied $confirm_result" | tee -a $log_path
					break;
				fi
			done
			if [[ "${confirm_result^^}" == "Y" ]] ; then
			       echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_manage_jobs.py --job=\"import\" " | tee -a $log_path
			       echo -n "--action=\"confirm\" --token=\"$token\" --secret=\"$secret\" --jobid=\"$jobid\" " | tee -a $log_path
			       echo    "in 10 seconds. Hit CTRL+C to cancel" | tee -a $log_path
			       sleep 10
			       python3 solnet_manage_jobs.py --job="import" --action="confirm" --token="$token" --secret="$secret" \
				       --jobid="$jobid" 2>&1 | tee -a $log_path
			       echo -n "$(date +'%Y-%m-%d %H:%M:%S') Execute python3 solnet_manage_jobs.py " | tee -a $log_path
                               echo -n "--job=\"import\" --action=\"list\" --token=\"$token\" " | tee -a $log_path
                               echo    "--secret=\"$secret\" to view import progress" | tee -a $log_path

			else
			       echo -n "$(date +'%Y-%m-%d %H:%M:%S') Import Process Aborted. Deleting Staged Data. Executing " | tee -a $log_path
			       echo -n " python3 solnet_manage_jobs.py --job=\"import\" --action=\"delete\" --token=\"$token\" " | tee -a $log_path
			       echo "--secret=\"$secret\" --jobid=\"$jobid\" in 10 seconds. Hit CTRL+C to cancel" | tee -a $log_path
			       sleep 10
			       python3 solnet_manage_jobs.py --job="import" --action="delete" --token="$token" --secret="$secret" \
				       --jobid="$jobid" 2>&1 | tee -a $log_path
			fi

		else
			echo "$(date +'%Y-%m-%d %H:%M:%S') Process Aborted" 2>&1 | tee -a $log_path
		fi
        fi
fi

			


