#!/bin/bash

while [ $# -gt 0 ] ; do
	case "$1" in
		--node*|-n*)
			if [[ "$1" != *=* ]]; then shift; fi
			node="${1#*=}"
			;;
		--sourceid*|-i*)
			if [[ "$1" != *=* ]]; then shift; fi
			sid="${1#*=}"
			;;
		--startdatetime*|-s*)
			if [[ "$1" != *=* ]]; then shift; fi
			startdatetime="${1#*=}"
			;;
		--enddatetime*|-e*)
			if [[ "$1" != *=* ]]; then shift; fi
			enddatetime="${1#*=}"
			;;
		--latitude*|-a*)
			if [[ "$1" != *=* ]]; then shift; fi
			lat="${1#*=}"
			;;
		--longitude*|-o*)
			if [[ "$1" != *=* ]]; then shift; fi
			long="${1#*=}"
			;;
		--energyspike*|-g*)
			if [[ "$1" != *=* ]]; then shift; fi
			energyspike="${1#*=}"
			;;
		--api*|-p*)
			if [[ "$1" != *=* ]]; then shift; fi
			solcast_api_token="${1#*=}"
			;;
		--token*|-k*)
			if [[ "$1" != *=* ]]; then shift; fi
			token="${1#*=}"
			;;
		--secret*|-c*)
			if [[ "$1" != *=* ]]; then shift; fi
			secret="${1#*=}"
			;;
		--help|-h)
			echo -n "Usage: ee-backfiller-2.0 [--help|-h] --node|-n [NODE] --sourceid|-i [SOURCE ID] "
			echo -n "--startdate|-s [STARTDATETIME in \"YYYY-MM-DD HH:MM\"] --enddatetime|-e [ENDDATETIME "
			echo -n "in \"YYYY-MM-DD HH:MM\"] --latitude|-a [LATITUDE] --longitude|-o [LONGITUDE] "
			echo -n "--energyspike|-g [ENERGY SPIKE IN KWH] --api|-p [SOLCAST API TOKEN] --token|-k "
			echo "[SOLNET TOKEN] --secret|-c [SOLNET SECRET]" 
			exit 0
			;;
		*)
			>&2 echo -n "Error: The following arguments are required --node --sourceid --startdatetime "
			echo "--enddatetime --latitude --longitude --energyspike --api --token --secret"
			exit 1
			;;
	esac
	shift
done

if [[ -z "$node" || -z "$sid" || -z "$startdatetime" || -z "$enddatetime" || -z "$lat" || -z "$long" || -z "$energyspike" \
	|| -z "$solcast_api_token" || -z "$token" || -z "$secret" ]] ; then

        echo -n "Error: The following arguments are required --node --sourceid --startdatetime --enddatetime --latitude "
	echo "--longitude --energyspike --api --token --secret" | tee -a $log_path

else
	sourceids=$(echo $sid | sed "s/\//%2F/g")
	startdate=$(echo ${startdatetime} | sed "s/ /T/g;s/:/%3A/g")
	enddate=$(echo ${enddatetime} | sed "s/ /T/g;s/:/%3A/g")
	log_path="logs/ee-backfiller.log"
	maxoutput=1000000

	echo -n "$(date +'%Y-%m-%d %H:%M:%S') Testing parameters with python3 solnet_query.py --node=\"$node\" --sourceids=\"$sourceids\" " 2>&1 | tee -a $log_path
	echo -n "--startdate=\"$startdate\" --enddate=\"$enddate\" --aggregate=\"Month\" --maxoutput=\"1000000\" --token=\"$token\" " 2>&1 | tee -a $log_path
	echo "--secret=\"$secret\"" 2>&1 | tee -a $log_path
	test_params=$(python3 solnet_query.py --node="$node" --sourceids="$sourceids" --startdate="$startdate" --enddate="$enddate" \
		--aggregate="Month" --maxoutput="1000000" --token="$token" --secret="$secret")
	echo "$(date +'%Y-%m-%d %H:%M:%S') $test_params" 2>&1 | tee -a $log_path

	if [[ "$test_params" == *"Error"* ]] ; then
		echo -n "$(date +'%Y-%m-%d %H:%M:%S') Usage: ee-backfiller-2.0 [--help|-h] --node|-n [NODE] " | tee -a $log_path
		echo -n "--sourceid|-i [SOURCE ID] --startdate|-s [STARTDATETIME in \"YYYY-MM-DD HH:MM\"] " | tee -a $log_path
		echo -n "--enddatetime|-e [ENDDATETIME in \"YYYY-MM-DD HH:MM\"] --latitude|-a [LATITUDE] " | tee -a $log_path
		echo -n "--longitude|-o [LONGITUDE] --energyspike|-g [ENERGY SPIKE IN KWH] --api|-p " | tee -a $log_path
		echo "[SOLCAST API TOKEN] --token|-k [SOLNET TOKEN] --secret|-c [SOLNET SECRET]" | tee -a $log_path
	else
	
		echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executed: /bin/bash ee-backfiller-2.0 --node " | tee -a $log_path
		echo -n "$node --sourceids $sid --startdatetime $startdatetime --enddatetime " | tee -a $log_path
		echo -n "$enddatetime --latitude $lat --longitude $long --energyspike $energyspike " | tee -a $log_path
		echo "--api $solcast_api_token --token $token --secret $secret" | tee -a $log_path

		echo "$(date +'%Y-%m-%d %H:%M:%S') *********** PROCESS 1 *************" 2>&1 | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Identifying gaps with aggregation in Days" 2>&1 | tee -a $log_path
		echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing: python3 solnet_query.py --node=\"$node\" " | tee -a $log_path
		echo -n "--sourceids=\"$sourceids\" --startdate=\"$startdate\" --enddate=\"$enddate\" " | tee -a $log_path
		echo "--aggregate=\"Day\" --maxoutput=\"$maxoutput\" --token=\"$token\" --secret=\"$secret\"" | tee -a $log_path

		first_row_days=0
		gap_in_days=0
		day_data_path="data/${node}_${sourceids}_${startdate}_${enddate}_datum_days"
		
		python3 solnet_query.py --node="$node" --sourceids="$sourceids" --startdate="$startdate" --enddate="$enddate" \
		       	--aggregate="Day" --maxoutput="$maxoutput" --token="$token" --secret="$secret" > $day_data_path
		
		sed -i '1d' $day_data_path
		sleep 1
		
		total_lines=$(cat $day_data_path | wc -l )

		while IFS=, read UTCDateTime localDate localTime nodeId sourceId watts_min watts_max current_min \
			current_max voltage_min voltage_max frequency_min frequency_max powerFactor_min powerFactor_max \
			apparentPower_min apparentPower_max reactivePower_min reactivePower_max lineVoltage_min \
			lineVoltage_max current_a_min current_a_max current_b_min current_b_max current_c_min current_c_max \
			voltage_a_min voltage_a_max voltage_b_min voltage_b_max voltage_c_min voltage_c_max voltage_ab_min \
			voltage_ab_max voltage_bc_min voltage_bc_max voltage_ca_min voltage_ca_max watts current voltage \
			frequency powerFactor apparentPower reactivePower lineVoltage current_a current_b current_c voltage_a \
			voltage_b voltage_c voltage_ab voltage_bc voltage_ca wattHours wattHoursReverse phase
		do
			if [[ $first_row_days == 0 ]] ; then
				first_row_days=1
				expected_next_localDate=$(date -d "$localDate + 1 day" +%Y-%m-%d)
			else

				current_line_number=$(cat -n $day_data_path | grep "$UTCDateTime" | awk '{print $1 }')
				next_possible_gap_line_number=$((current_line_number+1))

				if [[ $next_possible_gap_line_number == $((total_lines+1)) ]] ; then
					gap_in_days=0
					break
				fi

				wattHours=$(awk -v num="$next_possible_gap_line_number" '{if(NR==num) print $0}' $day_data_path | awk -F "," '{print $(NF-2)}')

				if [[ "$localDate" != "$expected_next_localDate" ]] || [[ $wattHours == 0 ]] || [[ -z "$wattHours" ]]  ; then

					if [[ "$localDate" != "$expected_next_localDate" ]] ; then
						start_gap_line_number=$((current_line_number-1))
						next_possible_gap_line_number=$((next_possible_gap_line_number-1))
					else
						start_gap_line_number=$current_line_number
					fi

					while [[ $wattHours == 0 ]] || [[ -z "$wattHours" ]]
					do
						next_possible_gap_line_number=$((next_possible_gap_line_number+1))
						wattHours=$(awk -v num="$next_possible_gap_line_number" '{if(NR==num) print $0}' $day_data_path | \
							awk -F "," '{print $(NF-2)}')
					done
					# Once the line number of the end gap is determined, then extract the utc and local dates from the line
					start_gap_utc_date=$(awk -v num="$start_gap_line_number" '{if(NR==num) print $0}' $day_data_path | cut -d "," -f 1 )
					end_gap_utc_date=$(awk -v num="$next_possible_gap_line_number" '{if(NR==num) print $0}' $day_data_path | cut -d "," -f 1 )

					# Formats the dates to be used in the next process in determining the gap in data aggregated hourly

					starthour=$(date --date "$start_gap_utc_date" +'%Y-%m-%dT00:00')
					endhour=$(date --date "$end_gap_utc_date" +'%Y-%m-%dT23:59')

					# Used only in the next condition to display the proper output message
					gap_in_days=1
					break

				else
					expected_next_localDate=$(date -d "$localDate + 1 day" +%Y-%m-%d)
				fi
			fi
		done < $day_data_path

		if [ $gap_in_days -eq 1 ] ; then
			echo "$(date +'%Y-%m-%d %H:%M:%S') Gap Found between $startdate and $enddate" | tee -a $log_path
		else
			echo "$(date +'%Y-%m-%d %H:%M:%S') No Gaps Found in datum with aggregation in Days" | tee -a $log_path
			starthour=$( echo $startdate | sed "s/04%3A00%3A00/00%3A00%3A00/g")
			endhour=$( echo $enddate | sed "s/04%3A00%3A00/23%3A59%3A00/g" )

		fi 
			
		echo "$(date +'%Y-%m-%d %H:%M:%S') ***********PROCESS 2*************" | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Identifying gaps in datum with aggregation in Hours $starthour and $endhour" | tee -a $log_path
		echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing : python3 solnet_query.py --node=\"$node\" " | tee -a $log_path
		echo -n "--sourceids=\"$sourceids\" --startdate=\"$starthour\" --enddate=\"$endhour\" " | tee -a $log_path
		echo "--aggregate=\"Hour\" --maxoutput=\"$maxoutput\" --token=\"$token\" --secret=\"$secret\"" | tee -a $log_path

		first_row_hours=0
		gap_in_hours=0
		hour_data_path="data/${node}_${sourceids}_${starthour}_${endhour}_datum_hours"
		
		python3 solnet_query.py --node="$node" --sourceids="$sourceids" --startdate="$starthour" \
			--enddate="$endhour" --aggregate="Hour" --maxoutput="$maxoutput" --token="$token" --secret="$secret" > $hour_data_path

		sed -i '1d' $hour_data_path
		sleep 1

		total_lines=$(cat $hour_data_path | wc -l)

		while IFS=, read createdUTCDate localDate localTime nodeId sourceId watts_min watts_max \
			current_min current_max voltage_min voltage_max frequency_min frequency_max powerFactor_min \
			powerFactor_max apparentPower_min apparentPower_max reactivePower_min reactivePower_max lineVoltage_min \
			lineVoltage_max current_a_min current_a_max current_b_min current_b_max current_c_min current_c_max \
			voltage_a_min voltage_a_max voltage_b_min voltage_b_max voltage_c_min voltage_c_max voltage_ab_min \
			voltage_ab_max voltage_bc_min voltage_bc_max voltage_ca_min voltage_ca_max watts current voltage \
			frequency powerFactor apparentPower reactivePower lineVoltage current_a current_b current_c voltage_a \
			voltage_b voltage_c voltage_ab voltage_bc voltage_ca wattHours wattHoursReverse phase
			do
				if [[ $first_row_hours == 0 ]] ; then
					first_row_hours=1
					expected_next_hour=$(date --date "$(date -Iseconds -d "$localDate $localTime") + 1 hour" \
						+'%Y-%m-%d %H:00')
										
				else
					localDateTime="$localDate $localTime"
					current_line_number=$(cat -n $hour_data_path | grep "$UTCDateTime" | awk '{print $1 }')
                                        next_possible_gap_line_number=$((current_line_number+1))
                                        if [[ $next_possible_gap_line_number == $((total_lines+1)) ]]
                                        then
                                                gap_in_hours=0
                                                break
                                        fi

                                        wattHours=$(awk -v num="$next_possible_gap_line_number" '{if(NR==num) print $0}' \
                                                $hour_data_path | awk -F "," '{print $(NF-2)}')

                                        if [[ "$localDateTime" != "$expected_next_hour" ]] || [[ $wattHours == 0 ]] || [[ -z "$wattHours" ]]
                                        then
                                                if [[ "$localDateTime" != "$expected_next_hour" ]]
                                                then
                                                        start_gap_line_number=$((current_line_number-1))
                                                        next_possible_gap_line_number=$((next_possible_gap_line_number-1))
                                                else
                                                        start_gap_line_number=$current_line_number
                                                fi

                                                while [[ $wattHours == 0 ]] || [[ -z "$wattHours" ]]
                                                do
                                                        next_possible_gap_line_number=$((next_possible_gap_line_number+1))
                                                        wattHours=$(awk -v num="$next_possible_gap_line_number" '{if(NR==num) print $0}' \
                                                                $hour_data_path | awk -F "," '{print $(NF-2)}')
                                                done

                                                start_gap_utc_datetime=$(awk -v num="$start_gap_line_number" '{if(NR==num) print $0}' \
                                                        $hour_data_path | cut -d "," -f 1 )
                                                start_gap_utc_datetime_hour_before=$(date --date "$(date -Iseconds -d \
                                                        "$start_gap_utc_datetime") - 1 hour" +'%Y-%m-%d %H:00')

                                                end_gap_utc_datetime=$(awk -v num="$next_possible_gap_line_number" \
                                                        '{if(NR==num) print $0}' $hour_data_path | cut -d "," -f 1 )

                                                end_gap_utc_datetime_hour_after=$(date --date "$(date -Iseconds -d \
                                                        "$end_gap_utc_datetime") + 1 hour" +'%Y-%m-%d %H:00')

                                                startdate=$(echo $start_gap_utc_datetime_hour_before | sed "s/ /T/g ; s/:/%3A/g ; s/Z//g")
                                                enddate=$(echo $end_gap_utc_datetime_hour_after | sed "s/ /T/g ; s/:/%3A/g ; s/Z//g")
                                                gap_in_hours=1
                                                break
                                        else
                                                expected_next_hour=$(date --date "$(date -Iseconds -d "$localDate $localTime") + 1 hour" \
                                                        +'%Y-%m-%d %H:00')
                                        fi
                                fi
		done < $hour_data_path
		
		if [ $gap_in_hours -eq 1 ] ; then
			echo "$(date +'%Y-%m-%d %H:%M:%S') Gaps Found between $start_gap_utc_datetime and $end_gap_utc_datetime" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Added 1 hour offset for next process. Start: $startdate End: $enddate " 2>&1 | tee -a $log_path
		else
			echo "$(date +'%Y-%m-%d %H:%M:%S') No Gaps Found in datum with aggregation in Hours" 2>&1 | tee -a $log_path
		fi
		
		echo "$(date +'%Y-%m-%d %H:%M:%S') ***********PROCESS 3*************" 2>&1 | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Identifying gaps in datum with aggregation in Minutes bettwen $startdate and $enddate" | tee -a $log_path
		echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing : python3 solnet_query.py --node=\"$node\" " | tee -a $log_path
		echo -n "--sourceids=\"$sourceids\" --startdate=\"$startdate\" --enddate=\"$enddate\" --aggregate=\"None\" " | tee -a $log_path
		echo "--maxoutput=\"$maxoutput\" --token=\"$token\" --secret=\"$secret\"" | tee -a $log_path
		first_row_minutes=0
		gap_in_minutes=0
		minute_data_path="data/${node}_${sourceids}_${startdate}_${enddate}_datum_minutes"
		
		python3 solnet_query.py --node="$node" --sourceids="$sourceids" --startdate="$startdate" --enddate="$enddate" \
			--aggregate="None" --maxoutput="$maxoutput" --token="$token" --secret="$secret" > $minute_data_path
		
		sed -i '1d' $minute_data_path
		sleep 1
		
		total_lines=$(cat $minute_data_path | wc -l)
		while IFS=, read UTCDateTime localDate localTime nodeId sourceId watts current voltage frequency powerFactor \
			apparentPower reactivePower lineVoltage current_a current_b current_c voltage_a voltage_b voltage_c \
			voltage_ab voltage_bc voltage_ca wattHours wattHoursReverse phase
			do
				if [[ $first_row_minutes == 0 ]] ; then
					first_row_minutes=1
					utc_datetime_epoch=$(date -d "$UTCDateTime" +%s)
					previous_utc_datetime_epoch=$utc_datetime_epoch
				else
					utc_datetime_epoch=$(date -d "$UTCDateTime" +%s)
					utc_datetime_difference=$((utc_datetime_epoch-previous_utc_datetime_epoch))

					current_line_number=$(cat -n $minute_data_path | grep "$UTCDateTime" | awk '{print $1 }')
					next_possible_gap_line_number=$((current_line_number+1))

					if [[ $next_possible_gap_line_number == $((total_lines+1)) ]] ; then
						gap_in_minutes=0
						break
					fi

					wattHours=$(awk -v num="$next_possible_gap_line_number" '{if(NR==num) print $0}' $minute_data_path | \
						awk -F "," '{print $(NF-2)}' )

					if [ $utc_datetime_difference -gt 3601 ] || [[ $wattHours == 0 ]] || [[ -z "$wattHours" ]] ; then
						echo "entered loop"
						if [ $utc_datetime_difference -gt 3601 ] ; then
							start_gap_line_number=$((current_line_number-1))
							next_possible_gap_line_number=$((next_possible_gap_line_number-1))
						else
							start_gap_line_number=$current_line_number
						fi

						while [[ $wattHours == 0 ]] || [[ -z "$wattHours" ]]
						do
						      next_possible_gap_line_number=$((next_possible_gap_line_number+1))
						      wattHours=$(awk -v num="$next_possible_gap_line_number" '{if(NR==num) print $0}' $minute_data_path | \
							      awk -F "," '{print $(NF-2)}' )

						done
						start_gap_utc_datetime=$(awk -v num="$start_gap_line_number" '{if(NR==num) print $0}' $minute_data_path | \
							cut -d "," -f 1 )
						end_gap_utc_datetime=$(awk -v num="$next_possible_gap_line_number" '{if(NR==num) print $0}' $minute_data_path | \
							cut -d "," -f 1 )

						start_gap_halfsec=$(echo $start_gap_utc_datetime | awk -F ':' '{print $NF}' | sed 's/Z//g')
						end_gap_halfsec=$(echo $end_gap_utc_datetime | awk -F ':' '{print $NF}' | sed 's/Z//g')

						start_gap_localdatetime=$(awk -v num="$start_gap_line_number" '{if(NR==num) print $0}' $minute_data_path | \
							cut -d "," -f 2,3 | sed "s/,/ /g;s/$/:${start_gap_halfsec}/g")
						end_gap_localdatetime=$(awk -v num="$next_possible_gap_line_number" '{if(NR==num) print $0}' $minute_data_path | \
							cut -d "," -f 2,3 | sed "s/,/ /g;s/$/:${end_gap_halfsec}/g")

						start_gap_watthours=$(awk -v num="$start_gap_line_number" '{if(NR==num) print $0}' $minute_data_path | \
							cut -d "," -f 23 )
						end_gap_watthours=$( awk -v num="$next_possible_gap_line_number" '{if(NR==num) print $0}' $minute_data_path | \
							cut -d "," -f 23 )

						echo -n "$(date +'%Y-%m-%d %H:%M:%S') Gap in UTC Found between $start_gap_utc_datetime " | tee -a $log_path
						echo "and $end_gap_utc_datetime" | tee -a $log_path
						echo -n "$(date +'%Y-%m-%d %H:%M:%S') Gap in Local Found between $start_gap_localdatetime " | tee -a $log_path
						echo "and $end_gap_localdatetime" | tee -a $log_path

						start_gap=$start_gap_utc_datetime
						end_gap=$end_gap_utc_datetime
						gap_in_minutes=1
						break
					else
						previous_utc_datetime_epoch=$utc_datetime_epoch
					fi

				fi
		done < $minute_data_path


		if [ $gap_in_minutes -eq 0 ] ; then
			echo "$(date +'%Y-%m-%d %H:%M:%S') No Gaps Found in datum with aggregation in Minutes" 2>&1 | tee -a $log_path
		else
			echo ""
			echo "$(date +'%Y-%m-%d %H:%M:%S') Start Gap in UTC: $start_gap" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Start Gap in Local DateTime:  $start_gap_localdatetime" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') End Gap In UTC: $end_gap" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') End Gap in Local DateTime: $end_gap_localdatetime" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Start Gap wattHours: $start_gap_watthours" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') End Gap wattHours: $end_gap_watthours" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') ***********PROCESS 4*************" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Checking for data between the gap. Adding 5 second offset" 2>&1 | tee -a $log_path
			
			start_gap_epoch=$(date -d "$start_gap" +%s)
			end_gap_epoch=$(date -d "$end_gap" +%s)
			
			new_start_gap=$(date --date "$(date -Iseconds -d "$start_gap") + 5 seconds" +'%Y-%m-%dT%H:%M:%S' | sed "s/:/%3A/g" )
			new_start_gap_local=$(date --date "$(date -Iseconds -d "$start_gap_localdatetime") + 5 seconds" +'%Y-%m-%dT%H:%M:%S' | sed "s/:/%3A/g" )
			new_end_gap=$(date --date "$(date -Iseconds -d "$end_gap") - 5 seconds" +'%Y-%m-%dT%H:%M:%S' | sed "s/:/%3A/g" )
			new_end_gap_local=$(date --date "$(date -Iseconds -d "$end_gap_localdatetime") - 5 seconds" +'%Y-%m-%dT%H:%M:%S' | sed "s/:/%3A/g" )

			gap_num_seconds=$((end_gap_epoch - start_gap_epoch))
			
			echo "$(date +'%Y-%m-%d %H:%M:%S') New Start Gap in UTC: $new_start_gap" | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') New End Gap in UTC: $new_end_gap" | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') New Start Gap in Local Datetime: $new_start_gap_local" | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') New End Gap in Local Datetime: $new_end_gap_local" | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Gap Num of Days: $((gap_num_seconds/60/60/24)) " | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Checking for datum within the gap " 2>&1 | tee -a $log_path
			
			echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_query.py --node=\"$node\" " | tee -a $log_path
			echo -n "--sourceids=\"$sourceids\" --startdate=\"$new_start_gap\" --enddate=\"$new_end_gap\" " | tee -a $log_path
			echo "--aggregate=\"None\" --maxoutput=\"$maxoutput\" --token=\"$token\" --secret=\"$secret\"" | tee -a $log_path
			python3 solnet_query.py --node="$node" --sourceids="$sourceids" --startdate="$new_start_gap" \
				--enddate="$new_end_gap" --aggregate="None" --maxoutput="$maxoutput" --token="$token" \
				--secret="$secret" > data/${node}_${sourceids}_${new_start_gap}_${new_end_gap}_datum_gap
			
			gap_count=$(sed '1d' data/${node}_${sourceids}_${new_start_gap}_${new_end_gap}_datum_gap | wc -l)
			echo "$(date +'%Y-%m-%d %H:%M:%S') Gap Datum Count: $gap_count" 2>&1 | tee -a $log_path
			cat data/${node}_${new_start_gap}_${new_end_gap}_datum_gap 2>&1 | tee -a $log_path
			
			echo "$(date +'%Y-%m-%d %H:%M:%S') ***********PROCESS 5*************" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Preparing Solcast Query Data" 2>&1 | tee -a $log_path

			# File where the python commands to download solcast data will be stored.
			solcast_script_path="data/${node}_${sourceids}_${lat}_${long}_${new_start_gap}_${new_end_gap}_solcast_script.sh"
			
			# File where the result of the python commands to download solcast data will be stored.
			solcast_csv_path="data/${node}_${sourceids}_${lat}_${long}_${new_start_gap}_${new_end_gap}_solcast_result.csv"
			>$solcast_script_path
		
			solcast_start=$(date --date "$(date -Iseconds -d "$start_gap") + 5 seconds" +'%Y-%m-%d %H:%M:%SZ' )
			solcast_end=$(date --date "$(date -Iseconds -d "$end_gap") - 5 seconds" +'%Y-%m-%d %H:%M:%SZ'  )

			if [ $gap_num_seconds -gt 2606399 ]; then
				
				solcast_start=$(date --date @$new_start_gap_epoch +'%Y-%m-%d %H:%M:%SZ' )
				solcast_end=$(date --date @$new_end_gap_epoch +'%Y-%m-%d %H:%M:%SZ' )

				solcast_partial=$(date --date "$solcast_start + 30 days" +'%Y-%m-%d 23:59:59Z')

				echo -n "python3 solcast_download.py --latitude=\"$lat\" --longitude=\"$long\" " | tee -a $solcast_script_path
                                echo -n "--startdate=\"$solcast_start\" --enddate=\"$solcast_partial\" " | tee -a $solcast_script_path
                                echo    "--token=\"$solcast_api_token\" > $solcast_csv_path" | tee -a $solcast_script_path

				solcast_num_seconds=$gap_num_seconds

				while [ $solcast_num_seconds -gt 2606399 ]
				do
					prev_solcast_partial=$(date --date "$solcast_partial + 1 day" +'%Y-%m-%d 00:00:00Z')
					solcast_partial_epoch=$(date -d "$prev_solcast_partial" +%s )

					solcast_end_epoch=$(date -d "$solcast_end" +%s )
					
					solcast_num_seconds=$((solcast_end_epoch - solcast_partial_epoch))
					if [ $solcast_num_seconds -gt 2606399 ]; then
						solcast_partial=$(date --date "$prev_solcast_partial + 30 days" +'%Y-%m-%d 23:59:59Z' )
						echo -n "python3 solcast_download.py --latitude=\"$lat\" " | tee -a $solcast_script_path
                                                echo -n "--longitude=\"$long\" " | tee -a $solcast_script_path | tee -a $solcast_script_path
                                                echo -n "--startdate=\"$prev_solcast_partial\" " | tee -a $solcast_script_path
                                                echo -n "--enddate=\"$solcast_partial\" " | tee -a $solcast_script_path
                                                echo    "--token=\"$solcast_api_token\" >> $solcast_csv_path" | tee -a $solcast_script_path
					else
						echo -n "python3 solcast_download.py "| tee -a $solcast_script_path
                                                echo -n "--latitude=\"$lat\" --longitude=\"$long\" " | tee -a $solcast_script_path
                                                echo -n "--startdate=\"$prev_solcast_partial\" --enddate=\"$solcast_end\" " | tee -a $solcast_script_path
                                                echo    "--token=\"$solcast_api_token\" >> $solcast_csv_path" | tee -a $solcast_script_path
						break
					fi
				done
			else
				echo -n "python3 solcast_download.py --latitude=\"$lat\" --longitude=\"$long\" " | tee -a $solcast_script_path
                                echo -n "--startdate=\"$solcast_start\" --enddate=\"$solcast_end\" " | tee -a $solcast_script_path
                                echo    "--token=\"$solcast_api_token\" > $solcast_csv_path" | tee -a $solcast_script_path
			fi

			
			echo "$(date +'%Y-%m-%d %H:%M:%S') Executing /bin/bash $solcast_script_path in 5 seconds. Hit Ctrl + C to Cancel" | tee -a $log_path
			sleep 5
			/bin/bash $solcast_script_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Process 5 Completed" | tee -a $log_path

			echo "$(date +'%Y-%m-%d %H:%M:%S') ***********PROCESS 6*************" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Generating Backfill Data" 2>&1 | tee -a $log_path

			a=0
			runtime=$(date +"%Y%m%d_%H%M%S")
			electrical_energy_data_path="data/${node}_${sourceids}_EEGAP_SolNetIMport_${runtime}.csv"
			ghitotal=$( cat $solcast_csv_path | awk -F"," '{sum+=($4)} END {print sum}' )
			echo "$(date +'%Y-%m-%d %H:%M:%S') Total Irrandiace Calculated: $ghitotal" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Total Enery Spike in KWH: $energyspike" 2>&1 | tee -a $log_path
			total_energy=$energyspike
			prevenergyinwatthours=0

			echo "$(date +'%Y-%m-%d %H:%M:%S') Calculating Backfill Data Driven by Irradiance Data" 2>&1 | tee -a $log_path

			echo "NodeID,SourceID,Date,watts,wattHours" > $electrical_energy_data_path
			while IFS=, read endperiod startperiod period irr
			do
				formatted_startperiod=$(echo $startperiod | sed "s/T/ /g" | sed "s/Z//g")
				ghiratio=$(echo "scale=8 ; $irr / $ghitotal" | bc )
				energy=$(echo "scale=8 ; $total_energy * $ghiratio * 12" | bc )
				energyinwatts=$(echo "scale=8 ; $energy * 1000" | bc )
				watthours=$(echo "scale=8 ; $energyinwatts / 12" | bc )
				totalwatthours=$(echo "scale=8 ; $prevenergyinwatthours + $watthours" | bc )
				prevenergyinwatthours=$totalwatthours
				echo "$node,$sid,$formatted_startperiod,$energyinwatts,$totalwatthours" >> $electrical_energy_data_path
			done < $solcast_csv_path

			echo "$(date +'%Y-%m-%d %H:%M:%S') Displaying parts of output file $electrical_energy_data_path" 2>&1 | tee -a $log_path
			head -n 5 $electrical_energy_data_path 2>&1 | tee -a $log_path
			echo "....." 2>&1 | tee -a $log_path
			tail -n 5 $electrical_energy_data_path 2>&1 | tee -a $log_path

			snevent1_start_end_datetime=$(date --date "$(date -Iseconds -d "$start_gap_localdatetime") + 5 seconds" +'%b %d, %Y %H:%M:%S' )
			snevent2_start_end_datetime=$(date --date "$(date -Iseconds -d "$end_gap_localdatetime") - 5 seconds" +'%b %d, %Y %H:%M:%S' )
			inner_start_gap_watthours=$(head -n 2 $electrical_energy_data_path | tail -n 1 | awk -F ',' '{print $NF}')
			inner_end_gap_watthours=$(tail -n 1 $electrical_energy_data_path | awk -F ',' '{print $NF}')
			echo "$(date +'%Y-%m-%d %H:%M:%S') Start Border - Energy Gap Backfill driven by Irradiance Data" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Node ID: $node" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Source ID: $sid" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Start datetime: $snevent1_start_end_datetime" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') End datetime: $snevent1_start_end_datetime" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Final reading: $start_gap_watthours" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Start Reading: $inner_start_gap_watthours" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') End Border - Energy Gap Backfill driven by Irradiance Data" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Node ID: $node" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Source ID: $sid" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Start datetime: $snevent2_start_end_datetime" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') End datetime: $snevent2_start_end_datetime" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Final reading: $inner_end_gap_watthours" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Start Reading: $end_gap_watthours" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Compressing output file $electrical_energy_data_path" 2>&1 | tee -a $log_path
			dos2unix  $electrical_energy_data_path
			sleep 1
			xz -k $electrical_energy_data_path
				
			echo "$(date +'%Y-%m-%d %H:%M:%S') ***********PROCESS 7*************" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Creating staged data for solnet import" 2>&1 | tee -a $log_path
			echo "$(date +'%Y-%m-%d %H:%M:%S') Checking size of file" 2>&1 | tee -a $log_path	
			filesizebytes=$(ls -l $electrical_energy_data_path | awk '{print $5}')	
			filsesizemb=$(($filesizebytes/1048576))
		
			echo "$(date +'%Y-%m-%d %H:%M:%S') Size of file: $filsesizemb" 2>&1 | tee -a $log_path		
			if [ $filsesizemb -lt 20 ] ; then
				compress="disabled"
			else
				electrical_energy_data_path="${electrical_energy_data_path}.xz"
				compress="enabled"
			fi

			echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_import.py --node=\"$node\" " | tee -a $log_path
                        echo -n "--sourceids=\"$sourceids\" --timezone=\"UTC\" --compression=\"$compress\" " | tee -a $log_path
                        echo    "--filepath=\"$electrical_energy_data_path\" --token=\"$token\" --secret=\"$secret\"" | tee -a $log_path

			sleep 5
			

			jobid=$(python3 solnet_import.py --node="$node" --sourceids="$sourceids" --timezone="UTC" \
				--compression="$compress" --filepath="$electrical_energy_data_path" --token="$token" --secret="$secret")	

			echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_manage_jobs.py " | tee -a $log_path
			echo -n "--job=\"import\" --action=\"preview\" --token=\"$token\" --secret=\"$secret\" " | tee -a $log_path
			echo  "--jobid=\"$jobid\" to preview imported data" | tee -a $log_path

			python3 solnet_manage_jobs.py --job="import" --action="preview" --token="$token" --secret="$secret" \
				--jobid="$jobid" 2>&1 | tee -a $log_path

			echo -n "$(date +'%Y-%m-%d %H:%M:%S') To apply staged data, python3 solnet_manage_jobs.py " | tee -a $log_path
			echo -n "--job=\"import\" --action=\"confirm\" --token=\"$token\" --secret=\"$secret\" " | tee -a $log_path
			echo "--jobid=\"$jobid\" will be executed" | tee -a $log_path

			while true
			do
				echo -n "$(date +'%Y-%m-%d %H:%M:%S') Would You Like To Proceed To Apply Staged Data [Y/N]: " 2>&1 | tee -a $log_path
				read confirm_result < /dev/tty

				if [[ "${confirm_result^^}" == "Y" || "${confirm_result^^}" == "N" ]] ; then
					echo "$(date +'%Y-%m-%d %H:%M:%S') Confirm Result recevied $confirm_result" 2>&1 | tee -a $log_path 
					break;
				fi
			done
				
			if [[ "${confirm_result^^}" == "Y" ]] ; then

				if [ $gap_count -gt 0 ]; then

					echo -n "$(date +'%Y-%m-%d %H:%M:%S') Datum count in gap is greater than 0. "
					echo -n "Gap data dumped in data/${node}_${sourceids}_${new_start_gap}_${new_end_gap}_datum_gap "
					ëcho "will be deleted first" 2>&1 | tee -a $log_path
					cat data/${node}_${sourceids}_${new_start_gap}_${new_end_gap}_datum_gap 2>&1 | tee -a $log_path

					echo -n "Executing python3 solnet_expire_preview.py --node=\"$nodeId\" " | tee -a $log_path
                                        echo -n "--sourceids=\"$sourceids\" --localstartdate=\"$new_start_gap_local\" " | tee -a $log_path
                                        echo "--localenddate=\"$new_end_gap_local\" --token=\"$token\" --secret=\"$secret\"" | tee -a $log_path
					
					result_count=$(python3 solnet_expire_preview.py --node="$nodeId" --sourceids="$sourceids" \
						--localstartdate="$new_start_gap_local" --localenddate="$new_end_gap_local" --token="$token" --secret="$secret")

					echo "$(date +'%Y-%m-%d %H:%M:%S') COUNT RESULT = $result_count" 2>&1 | tee -a $log_path

					if [ $result_count -ne $gap_count ] ; then
						echo "$(date +'%Y-%m-%d %H:%M:%S') Count doesn't match, adjust date and run manually" 2>&1 | tee -a $log_path
					else
						echo "$(date +'%Y-%m-%d %H:%M:%S') Count of previewed data match count of data in gap."
						echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 " | tee -a $log_path
						echo -n "solnet_expire_confirm.py --node=\"$nodeId\" " | tee -a $log_path
						echo -n "--sourceids=\"$sourceids\" --localstartdate=\"$new_start_gap_local\" " | tee -a $log_path
						echo -n "--localenddate=\"$new_end_gap_local\" --token=\"$token\" " | tee -a $log_path
						echo "--secret=\"$secret\" in 10 seconds. Hit CTRL + C to Cancel" | tee -a $log_path
						sleep 10
						python3 solnet_expire_confirm.py --node="$nodeId" --sourceids="$sourceids" \
							--localstartdate="$new_start_gap_local" --localenddate="$new_end_gap_local" \
							--token="$token" --secret="$secret" 2>&1 | tee -a $log_path

						echo -n "$(date +'%Y-%m-%d %H:%M:%S') Please wait for a few minutes for the datum expire " | tee -a $log_path
						echo "command to take effect" | tee -a $log_path
						sleep 60
						check_expire_datum_count=$(python3 solnet_expire_preview.py --node="$nodeId" \
							--sourceids="$sourceids" --localstartdate="$new_start_gap_local" \
							--localenddate="$new_end_gap_local" --token="$token" --secret="$secret") 
						
						while [ $check_expire_datum_count -gt 0 ]
						do
							check_expire_datum_count=$(python3 solnet_expire_preview.py --node="$nodeId" \
								--sourceids="$sourceids" --localstartdate="$new_start_gap_local" \
								--localenddate="$new_end_gap_local" --token="$token" --secret="$secret")
							sleep 60
						done
						
						echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_manage_jobs.py " | tee -a $log_path
						echo -n "--job=\"import\" --action=\"confirm\" --token=\"$token\" --secret=\"$secret\" " | tee -a $log_path
						echo "--jobid=\"$jobid\" in 10 seconds. Hit CTRL+C to cancel" | tee -a $log_path
						sleep 10
						python3 solnet_manage_jobs.py --job="import" --action="confirm" --token="$token" \
							--secret="$secret" --jobid="$jobid" 2>&1 | tee -a $log_path
						echo "$(date +'%Y-%m-%d %H:%M:%S') Import Process Completed. " 2>&1 | tee -a $log_path
					
					fi

				else
					echo -n "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_manage_jobs.py " | tee -a $log_path
					echo -n "--job=\"import\" --action=\"confirm\" --token=\"$token\" " | tee -a $log_path
					echo    "--secret=\"$secret\" --jobid=\"$jobid\" in 10 seconds. Hit CTRL+C to cancel" | tee -a $log_path
					sleep 10
					python3 solnet_manage_jobs.py --job="import" --action="confirm" --token="$token" \
						--secret="$secret" --jobid="$jobid" 2>&1 | tee -a $log_path
					echo "$(date +'%Y-%m-%d %H:%M:%S') Import Process Completed. " 2>&1 | tee -a $log_path
				fi
				
			
			else
				echo -n "$(date +'%Y-%m-%d %H:%M:%S') Import Process Aborted. " | tee -a $log_path
				echo -n "Deleting Staged Data. Executing python3 solnet_manage_jobs.py " | tee -a $log_path
				echo -n "--job=\"import\" --action=\"delete\" --token=\"$token\" " | tee -a $log_path
				echo    "--secret=\"$secret\" --jobid=\"$jobid\" in 10 seconds. Hit CTRL+C to cancel" | tee -a $log_path
				sleep 10
				python3 solnet_manage_jobs.py --job="import" --action="delete" --token="$token" \
					--secret="$secret" --jobid="$jobid" 2>&1 | tee -a $log_path
			fi
		fi
    fi
fi
