#!/bin/bash

while [ $# -gt 0 ] ; do
    case "$1" in
    --node*|-n*)
      if [[ "$1" != *=* ]]; then shift; fi # Value is next arg if no `=`
      node="${1#*=}" 
      ;;
    --sourceid*|-i*)
      if [[ "$1" != *=* ]]; then shift; fi
      sid="${1#*=}"
      ;;
    --timezone*|-z*)
      if [[ "$1" != *=* ]]; then shift; fi
      timezone="${1#*=}"
      ;;
    --startdatetime*|-s*)
      if [[ "$1" != *=* ]]; then shift; fi
      startdatetime="${1#*=}"
      ;;
    --enddatetime*|-e*)
      if [[ "$1" != *=* ]]; then shift; fi
      enddatetime="${1#*=}"
      ;;
    --latitude*|-a*)
      if [[ "$1" != *=* ]]; then shift; fi
      lat="${1#*=}"
      ;;
    --longitude*|-o*)
      if [[ "$1" != *=* ]]; then shift; fi
      long="${1#*=}"
      ;;
    --api*|-p*)
      if [[ "$1" != *=* ]]; then shift; fi
      solcast_api_token="${1#*=}"
      ;;
    --token*|-k*)
      if [[ "$1" != *=* ]]; then shift; fi
      token="${1#*=}"
      ;;
    --secret*|-c*)
      if [[ "$1" != *=* ]]; then shift; fi
      secret="${1#*=}"
      ;;
    --help|-h)
      printf "Usage: pyr-filler-2.0 [--help|-h] --node|-n [NODE] --sourceid|-i [SOURCE ID] --timezone|-z [TIMEZONE] --startdatetime|-s [START DATETIME] --enddatetime|-e [END DATETIME] --latitude|-a [LATITUDE] --longitude|-o [LONGITUDE] --api|-p [SOLCAST API TOKEN] --token|-k [SOLNET TOKEN] --secret|-c [SOLNET SECRET]"
      exit 0
      ;;
    *)
      >&2 printf "Error: The following arguments are required --node --sourceid --timezone --startdatetime --enddatetime --latitude --longitude --api --token --secret \n"
      exit 1
      ;;
  esac
  shift
done

# Checks if parameters have no value

if [[ -z "$node" || -z "$sid" || -z "$timezone" || -z "$startdatetime" || -z "$enddatetime" || -z "$lat" || -z "$long" || -z "$solcast_api_token" || -z "$token" || -z "$secret" ]] ; then

	printf "Error: The following arguments are required --node --sourceid --timezone --startdatetime --enddatetime --latitude --longitude --api --token --secret \n" 2>&1 | tee -a $log_path

else

	echo "$(date +'%Y-%m-%d %H:%M:%S') Executed: /bin/bash pyr-filler-2.0 --node $node --sourceid $sid --timezone $timezone --localstartdate \"$localstartdate\" --enddate \"$localenddate\" --latitude $lat --longitude $long --api $solcast_api_token --token $token --secret $secret" 2>&1 | tee -a $log_path

	# Formatted sourceids for output filename description
	sourceids=$(echo $sid | sed "s/\//%2F/g")
	log_path="logs/pyr-filler.log"
	maxoutput=1000000

	# Check timezone format if its valid
	
	check_timezone=$(awk '/^Z/ { print $2 }; /^L/ { print $timezone }' /usr/share/zoneinfo/tzdata.zi | grep -w $timezone)
	
	while [ -z "$check_timezone" ]
	do
		echo -n "$(date +'%Y-%m-%d %H:%M:%S') Not a valid timezone. Enter timezone:  "
		read timezone < /dev/tty
		check_timezone=$(awk '/^Z/ { print $2 }; /^L/ { print $timezone }' /usr/share/zoneinfo/tzdata.zi | grep -w $timezone)
	done
	
	# Converts the entered date to local and then utc
	#localstartdate=$(TZ=$timezone date -d "$4 00:00:00" )
	#localenddate=$(TZ=$timezone date -d "$5 23:59:59" ) 

	localstartdate=$(TZ=$timezone date -d "$startdatetime" )
	localenddate=$(TZ=$timezone date -d "$enddatetime" ) 

	utcstartdate=$(TZ=UTC date -d "$localstartdate" +'%Y-%m-%d %H:%M:%SZ')
	utcenddate=$(TZ=UTC date -d "$localenddate" +'%Y-%m-%d %H:%M:%SZ')

	# Formats the date with URL encoding

	startdate=$(echo $utcstartdate | sed 's/ /T/g;s/:/%3A/g')
	enddate=$(echo $utcenddate | sed 's/ /T/g;s/:/%3A/g')

	# Show different format for validation
	echo "$(date +'%Y-%m-%d %H:%M:%S') Local : $localstartdate" 2>&1 | tee -a $log_path
	echo "$(date +'%Y-%m-%d %H:%M:%S') UTC   : $utcstartdate" 2>&1 | tee -a $log_path
	echo "$(date +'%Y-%m-%d %H:%M:%S') UTC Formatted : $startdate" 2>&1 | tee -a $log_path
	echo "$(date +'%Y-%m-%d %H:%M:%S') Local : $localenddate" 2>&1 | tee -a $log_path
	echo "$(date +'%Y-%m-%d %H:%M:%S') UTC   : $utcenddate" 2>&1 | tee -a $log_path
	echo "$(date +'%Y-%m-%d %H:%M:%S') UTC Formatted : $enddate" 2>&1 | tee -a $log_path

	echo "$(date +'%Y-%m-%d %H:%M:%S') Checking for any data in specified date range " 2>&1 | tee -a $log_path
	echo "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_query.py --node=\"$node\" --sourceids=\"$sourceids\" --startdate=\"$startdate\" --enddate=\"$enddate\" --aggregate=\"None\" --maxoutput=\"$maxoutput\" --token=\"$token\" --secret=\"$secret\"" 2>&1 | tee -a $log_path

       	# If there is any data between the date range provided, it will be stored here	
	>data/${node}_${sourceids}_${startdate}_${enddate}_datum
	
	# Query to check for any solnet data between the date range provided
	python3 solnet_query.py --node="$node" --sourceids="$sourceids" --startdate="$startdate" --enddate="$enddate" --aggregate="None" --maxoutput="$maxoutput" --token="$token" --secret="$secret" 2>&1 | tee -a data/${node}_${sourceids}_${startdate}_${enddate}_datum


	# Removes the column header from the query output in filename data/${node}_${sourceids}_${startdate}_${enddate}_datum and counts the number of lines which is also the count of the datum between the date range provided
	datum_count=$(sed '1d'  data/${node}_${sourceids}_${startdate}_${enddate}_datum | wc -l)    
	
	# First two conditions is to make sure there are no errors with the query and ensure there is no data within provided date range
	if [[ "$(cat data/${node}_${sourceids}_${startdate}_${enddate}_datum)" == *"Error"* ]] ; then
                
		# Show captured error message
		echo -n "$(date +'%Y-%m-%d %H:%M:%S') " | tee -a $log_path
                cat data/${node}_${sourceids}_${startdate}_${enddate}_datum 2>&1 | tee -a $log_path
                
		# Show help info
		echo "$(date +'%Y-%m-%d %H:%M:%S') Usage: pyr-filler-2.0 [--help|-h] --node|-n [NODE] --sourceid|-i [SOURCE ID] --timezone|-z [TIMEZONE] --startdatetime|-s [START DATETIME] --enddatetime|-e [END DATETIME] --latitude|-a [LATITUDE] --longitude|-o [LONGITUDE] --api|-p [SOLCAST API TOKEN] --token|-k [SOLNET TOKEN] --secret|-c [SOLNET SECRET]" 2>&1 | tee -a $log_path
	
	else

		if [ $datum_count -gt 0 ]; then
			formatted_localstartdate=$(date -d "$localstartdate" +'%Y-%m-%d %H:%M:%S')
                	formatted_localenddate=$(date -d "$localenddate" +'%Y-%m-%d %H:%M:%S')

			echo "$(date +'%Y-%m-%d %H:%M:%S') Datum count between date range is greater than 0. Data dumped in data/${node}_${sourceids}_${startdate}_${enddate}_datum. Preview and Confirm commands below will be executed:" 2>&1 | tee -a $log_path
			echo "Preview: python3 solnet_expire_preview.py --node=\"$nodeId\" --sourceids=\"$sourceids\" --localstartdate=\"$formatted_localstartdate\" --localenddate=\"$formatted_localenddate\" --token=\"$token\" --secret=\"$secret\"" 2>&1 | tee -a $log_path
                        echo "Confirm: python3 solnet_expire_confirm.py --node=\"$nodeId\" --sourceids=\"$sourceids\" --localstartdate=\"$formatted_localstartdate\" --localenddate=\"$formatted_localenddate\" --token=\"$token\" --secret=\"$secret\"" 2>&1 | tee -a $log_path

		else
			echo "$(date +'%Y-%m-%d %H:%M:%S') No Data Detected. Preparing Solcast Query Data" 2>&1 | tee -a $log_path
		fi

		# File where the python commands to download solcast data will be stored. 
        	solcast_script_path="data/${node}_${sourceids}_${lat}_${long}_${startdate}_${enddate}_solcast_script.sh"
        	
		# File where the result of the python commands to download solcast data will be stored.
		solcast_csv_path="data/${node}_${sourceids}_${lat}_${long}_${startdate}_${enddate}_solcast_result.csv"
        	>$solcast_script_path

		# UTC date is used as it is  required when downloading solcast data. Date is converted to epoch to perform aritmethtic operation with the dates.
		start_date_epoch=$(date -d "$utcstartdate" +%s)
        	end_date_epoch=$(date -d "$utcenddate" +%s)
		
		# Computes the difference between the start and end dates to determine the number of seconds between the date range.
		date_range_num_seconds=$((end_date_epoch - start_date_epoch))

		# This condition checks if the date range exceeds the limit of 2606399 seconds which is 31 days since there is a 30 day limit on date range per solcast download.
		if [ $date_range_num_seconds -gt 2606399 ]; then
			echo "$(date +'%Y-%m-%d %H:%M:%S') Date range exceeds 30 days, creating multiple solcast queries" 2>&1 | tee -a $log_path
			solcast_start=$utcstartdate
                	solcast_end=$utcenddate
                	solcast_partial=$(date --date "$utcstartdate + 30 days" +'%Y-%m-%d 23:59:59Z')

			echo "python3 solcast_download.py --latitude="$lat" --longitude="$long" --startdate="$solcast_start" --enddate="$solcast_partial" --token="$solcast_api_token" > $solcast_csv_path" | tee -a $solcast_script_path

			solcast_num_seconds=$date_range_num_seconds

			while [ $solcast_num_seconds -gt 2606399 ]
                	do
				prev_solcast_partial=$(date --date "$solcast_partial + 1 day" +'%Y-%m-%d 00:00:00Z')
                        	solcast_partial_epoch=$(date -d "$prev_solcast_partial" +%s )
				solcast_end_epoch=$(date -d "$solcast_end" +%s )

				solcast_num_seconds=$((solcast_end_epoch - solcast_partial_epoch))
				if [ $solcast_num_seconds -gt 2606399 ]; then
					solcast_partial=$(date --date "$prev_solcast_partial + 30 days" +'%Y-%m-%d 23:59:59Z' )
                                	echo "python3 solcast_download.py --latitude="$lat" --longitude="$long" --startdate="$prev_solcast_partial" --enddate="$solcast_partial" --token="$solcast_api_token" >> $solcast_csv_path" | tee -a $solcast_script_path
				else
					echo "python3 solcast_download.py --latitude="$lat" --longitude="$long" --startdate="$prev_solcast_partial" --enddate="$solcast_end" --token="$solcast_api_token" >> $solcast_csv_path" | tee -a $solcast_script_path
                                	break
                        	fi
			done
	
	
		else
                        echo "python3 solcast_download.py --latitude="$lat" --longitude="$long" --startdate="$utcstartdate" --enddate="$utcenddate" --token="$solcast_api_token" > $solcast_csv_path" | tee -a $solcast_script_path
		fi

		echo "$(date +'%Y-%m-%d %H:%M:%S') Executing /bin/bash $solcast_script_path in 5 seconds. Hit Ctrl + C to Cancel" 2>&1 | tee -a $log_path
		sleep 5
		/bin/bash $solcast_script_path 2>&1 | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Process Completed" 2>&1 | tee -a $log_path
		
		# Compute irradiance hours using solcast data
		echo "$(date +'%Y-%m-%d %H:%M:%S') Computing Irradiance" 2>&1 | tee -a $log_path
		
		runtime=$(date +"%Y%m%d_%H%M%S")
		irradiance_data_path="data/${node}_${sourceids}_${startdate}_${enddate}_PYRFILL_SolNetIMport_${runtime}.csv"
		a=0
		
		echo "$(date +'%Y-%m-%d %H:%M:%S') Calculating irradiance hours for node $node and source $sid from $startdate to $enddate" | tee -a $log_path
		while IFS=, read periodend periodstart period ghi
		do
			periodstart_formatted=$(echo $periodstart | sed "s/T/ /g" | sed "s/Z//g")

             		# First condition is used to identify the first record where accumulating irradiance hours is just equal to the instantaneuous irradiance
			if [[ $a = 0 ]] ; then
                 		echo "node,source,date,irradiance,irradianceHours" > $irradiance_data_path
                 		echo "$node,$sid,$periodstart_formatted,$ghi,$ghi" >> $irradiance_data_path
				ghi_prev=$ghi
				a=1
             		else
		 		ghi_5min=$(echo "scale=8; $ghi/12" | bc )

                		# Adds a 12th of an irradiance hour based on the instantaneous irradiance, in this case  ghi.
                                # That’s because these are 5-min resolution data samples, and there are 12 of them in one 60-minute hour.
				if [[ $ghi -lt 12 && $ghi -gt 0  ]] ; then
                    			# Fixes missing leading 0 when the value is a decimal and less than 1
					ghi_new=$(echo "$ghi_prev + $ghi_5min" | bc | awk '{printf "%.8f", $0}' )
                 		else
                    			ghi_new=$(echo "$ghi_prev + $ghi_5min" | bc )
                 		fi
                 		ghi_prev=$ghi_new
                		echo "$node,$sid,$periodstart_formatted,$ghi,$ghi_new" >> $irradiance_data_path
             		fi
		done < $solcast_csv_path
	
		echo "$(date +'%Y-%m-%d %H:%M:%S') Displaying parts of output file $irradiance_data_path" 2>&1 | tee -a $log_path
        	head -n 5 $irradiance_data_path 2>&1 | tee -a $log_path
        	echo "....." 2>&1 | tee -a $log_path
        	tail -n 5 $irradiance_data_path 2>&1 | tee -a $log_path
		echo "$(date +'%Y-%m-%d %H:%M:%S') Compressing output file $irradiance_data_path" 2>&1 | tee -a $log_path
       		dos2unix $irradiance_data_path
        	sleep 1
        	xz -k $irradiance_data_path
        	echo "$(date +'%Y-%m-%d %H:%M:%S') Process completed" 2>&1 | tee -a $log_path
		
		####################################################################################################################################
		echo "$(date +'%Y-%m-%d %H:%M:%S') Determining Stitch Parameters" 2>&1 | tee -a $log_path

                startdate_1hour_before=$(date --date "$(date -Iseconds -d "$utcstartdate") - 1 hour" +'%Y-%m-%d %H:%M:%SZ' | sed 's/ /T/g;s/:/%3A/g')
                startdate_5sec_before=$(date --date "$(date -Iseconds -d "$utcstartdate") - 5 seconds" +'%Y-%m-%d %H:%M:%SZ' | sed 's/ /T/g;s/:/%3A/g')
                echo "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_query.py --node=\"$node\" --sourceids=\"$sourceids\" --startdate=\"$startdate_1hour_before\" --enddate=\"$startdate_5sec_before\" --aggregate=\"None\" --maxoutput=\"$maxoutput\" --token=\"$token\" --secret=\"$secret\" to determine SN EVENT 1" 2>&1 | tee -a $log_path

                sne1_datum="data/${node}_${sourceids}_${startdate_1hour_before}_${startdate_5sec_before}_datum"
                python3 solnet_query.py --node="$node" --sourceids="$sourceids" --startdate="$startdate_1hour_before" --enddate="$startdate_5sec_before" --aggregate="None" --maxoutput="$maxoutput" --token="$token" --secret="$secret" > $sne1_datum

                sed -i '1d' $sne1_datum

                if [ -z "$(cat $sne1_datum)" ] ; then
                	snevent1_start_end_datetime=$(date --date "$(date -Iseconds -d "$localstartdate") - 5 seconds" +'%b %d, %Y %H:%M:%S')
                	start_irradiancehours=0
                else
                	sne1_startlocaldate=$(cat $sne1_datum | tail -n 1 | awk -F ',' '{print $2}' )
                	sne1_startlocaltime=$(cat $sne1_datum | tail -n 1 | awk -F ',' '{print $3}' )
                	start_irradiancehours=$(cat $sne1_datum | tail -n 1| awk -F ',' '{print $NF}')
                	snevent1_start_end_datetime=$(date --date "$(date -Iseconds -d "$sne1_startlocaldate $sne1_startlocaltime") + 5 seconds" +'%b %d, %Y %H:%M:%S')
                fi

		enddate_5sec_after=$(date --date "$(date -Iseconds -d "$utcenddate") + 5 seconds" +'%Y-%m-%d %H:%M:%SZ' | sed 's/ /T/g;s/:/%3A/g')
		enddate_1hour_after=$(date --date "$(date -Iseconds -d "$utcenddate") + 1 hour" +'%Y-%m-%d %H:%M:%SZ' | sed 's/ /T/g;s/:/%3A/g')

                echo "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_query.py --node=\"$node\" --sourceids=\"$sourceids\" --startdate=\"$enddate_5sec_after\" --enddate=\"$enddate_1hour_after\" --aggregate=\"None\" --maxoutput=\"$maxoutput\" --token=\"$token\" --secret=\"$secret\" to determine SN EVENT 2" 2>&1 | tee -a $log_path

                sne2_datum="data/${node}_${sourceids}_${enddate_5sec_after}_${enddate_1hour_after}_datum"
                python3 solnet_query.py --node="$node" --sourceids="$sourceids" --startdate="$enddate_5sec_after" --enddate="$enddate_1hour_after" --aggregate="None" --maxoutput="$maxoutput" --token="$token" --secret="$secret" > $sne2_datum

                sed -i '1d' $sne2_datum

                if [ -z "$(cat $sne2_datum)" ] ; then
                	snevent2_start_end_datetime=$(date --date "$(date -Iseconds -d "$localstartdate") + 5 seconds" +'%b %d, %Y %H:%M:%S')
               		end_irradiancehours=0
                else
                	sne2_endlocaldate=$(cat $sne2_datum | head -n 1 | awk -F ',' '{print $2}' )
                	sne2_endlocaltime=$(cat $sne2_datum | head -n 1 | awk -F ',' '{print $3}' )
                	end_irradiancehours=$(cat $sne2_datum | head -n 1| awk -F ',' '{print $NF}')
                	snevent2_start_end_datetime=$(date --date "$(date -Iseconds -d "$sne2_endlocaldate $sne2_endlocaltime") - 5 seconds" +'%b %d, %Y %H:%M:%S')
                fi

                inner_start_irradiancehours=$(head -n 2 $irradiance_data_path | tail -n 1 | awk -F ',' '{print $NF}')
                inner_end_irradiancehours=$(tail -n 1 $irradiance_data_path | awk -F ',' '{print $NF}')

		echo "$(date +'%Y-%m-%d %H:%M:%S') Start Border - Fill for PYR" 2>&1 | tee -a $log_path
                echo "$(date +'%Y-%m-%d %H:%M:%S') Node ID: $node" 2>&1 | tee -a $log_path
                echo "$(date +'%Y-%m-%d %H:%M:%S') Source ID: $sid" 2>&1 | tee -a $log_path
                echo "$(date +'%Y-%m-%d %H:%M:%S') Start datetime: $snevent1_start_end_datetime" 2>&1 | tee -a $log_path
                echo "$(date +'%Y-%m-%d %H:%M:%S') End datetime: $snevent1_start_end_datetime" 2>&1 | tee -a $log_path
                echo "$(date +'%Y-%m-%d %H:%M:%S') Final reading: $start_irradiancehours" 2>&1 | tee -a $log_path
                echo "$(date +'%Y-%m-%d %H:%M:%S') Start Reading: $inner_start_irradiancehours" 2>&1 | tee -a $log_path
                echo "$(date +'%Y-%m-%d %H:%M:%S') End Border - Fill for PYR" 2>&1 | tee -a $log_path
                echo "$(date +'%Y-%m-%d %H:%M:%S') Node ID: $node" 2>&1 | tee -a $log_path
                echo "$(date +'%Y-%m-%d %H:%M:%S') Source ID: $sid" 2>&1 | tee -a $log_path
                echo "$(date +'%Y-%m-%d %H:%M:%S') Start datetime: $snevent2_start_end_datetime" 2>&1 | tee -a $log_path
                echo "$(date +'%Y-%m-%d %H:%M:%S') End datetime: $snevent2_start_end_datetime" 2>&1 | tee -a $log_path
                echo "$(date +'%Y-%m-%d %H:%M:%S') Final reading: $inner_end_irradiancehours" 2>&1 | tee -a $log_path
                echo "$(date +'%Y-%m-%d %H:%M:%S') Start Reading: $end_irradiancehours" 2>&1 | tee -a $log_path

		#####################################################################################################################################
		echo "$(date +'%Y-%m-%d %H:%M:%S') Creating staged data for import" 2>&1 | tee -a $log_path
                echo "$(date +'%Y-%m-%d %H:%M:%S') Checking size of file" 2>&1 | tee -a $log_path
                filesizebytes=$(ls -l $irradiance_data_path | awk '{print $5}')
                filsesizemb=$(($filesizebytes/1048576))

		echo "$(date +'%Y-%m-%d %H:%M:%S') Size of file: $filsesizemb" 2>&1 | tee -a $log_path
		if [ $filsesizemb -lt 20 ] ; then
		        compress="disabled"
                else
                        irradiance_data_path="${irradiance_data_path}.xz"
                        compress="enabled"
                fi
	
		echo "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_import.py --node=\"$node\" --sourceids=\"$sourceids\" --timezone=\"UTC\" --compression=\"$compress\" --filepath=\"$irradiance_data_path\" --token=\"$token\" --secret=\"$secret\" in 5 seconds. Hit Ctrl + C to Cancel" | tee -a $log_path

                sleep 5
		jobid=$(python3 solnet_import.py --node="$node" --sourceids="$sourceids" --timezone="UTC" --compression="$compress" --filepath="$irradiance_data_path" --token="$token" --secret="$secret")
		
		echo  "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_manage_jobs.py --job=\"import\" --action=\"preview\" --token=\"$token\" --secret=\"$secret\" --jobid=\"$jobid\" to preview imported data" | tee -a $log_path
                python3 solnet_manage_jobs.py --job="import" --action="preview" --token="$token" --secret="$secret" --jobid="$jobid" 2>&1 | tee -a $log_path

                echo  "$(date +'%Y-%m-%d %H:%M:%S') To apply staged data, python3 solnet_manage_jobs.py --job=\"import\" --action=\"confirm\" --token=\"$token\" --secret=\"$secret\" --jobid=\"$jobid\" will be executed" | tee -a $log_path

		while true
                do
                	echo -n "$(date +'%Y-%m-%d %H:%M:%S') Would You Like To Proceed To Apply Staged Data [Y/N]: " 2>&1 | tee -a $log_path
                       	read confirm_result < /dev/tty

                        if [[ "${confirm_result^^}" == "Y" || "${confirm_result^^}" == "N" ]] ; then
                        	echo "$(date +'%Y-%m-%d %H:%M:%S') Confirm Result recevied $confirm_result" 2>&1 | tee -a $log_path
                        	break;
                        fi
                done
                     
		if [[ "${confirm_result^^}" == "Y" ]] ; then

			if [ $gap_count -gt 0 ]; then


                        	echo "$(date +'%Y-%m-%d %H:%M:%S') Datum count between date range is greater than 0. Deleting data dumped in data/${node}_${sourceids}_${startdate}_${enddate}_datum." 2>&1 | tee -a $log_path

                                echo "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_expire_preview.py --node=\"$nodeId\" --sourceids=\"$sourceids\" --localstartdate=\"$formatted_localstartdate\" --localenddate=\"$formatted_localenddate\" --token=\"$token\" --secret=\"$secret\"" 2>&1 | tee -a $log_path

                                result_count=$(python3 solnet_expire_preview.py --node="$nodeId" --sourceids="$sourceids" --localstartdate="$formatted_localstartdate" --localenddate="$formatted_localenddate" --token="$token" --secret="$secret")


				if [ $result_count -ne $gap_count ] ; then
                                        echo "$(date +'%Y-%m-%d %H:%M:%S') Aborting count doesn't match. Adjust date range and delete manually then re run script" 2>&1 | tee -a $log_path
                                else
					echo "$(date +'%Y-%m-%d %H:%M:%S') Count of previewed data match count of data between date range." 2>&1 | tee -a $log_path
					echo "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_expire_confirm.py --node=\"$nodeId\" --sourceids=\"$sourceids\" --localstartdate=\"$formatted_localstartdate\" --localenddate=\"$formatted_localenddate\" --token=\"$token\" --secret=\"$secret\" in 10 seconds. Hit CTRL + C to Cancel" 2>&1 | tee -a $log_path
                                        sleep 10
                                        python3 solnet_expire_confirm.py --node="$nodeId" --sourceids="$sourceids" --localstartdate="$formatted_localstartdate" --localenddate="$formatted_localenddate" --token="$token" --secret="$secret" 2>&1 | tee -a $log_path

					echo "$(date +'%Y-%m-%d %H:%M:%S') Execute python3 solnet_manage_jobs.py --job=\"expire\" --action=\"list\" --token=\"$token\" --secret=\"$secret\" to show progress" 2>&1 | tee -a $log_path

                                        echo  "$(date +'%Y-%m-%d %H:%M:%S') Please wait for a few minutes for the datum expire command to take effect" 2>&1 | tee -a $log_path
                                        sleep 60
                                        check_expire_datum_count=$(python3 solnet_expire_preview.py --node="$nodeId" --sourceids="$sourceids" --localstartdate="$formatted_localstartdate" --localenddate="$formatted_localenddate" --token="$token" --secret="$secret")
                                        while [ $check_expire_datum_count -gt 0 ]
                                        do
                                                check_expire_datum_count=$(python3 solnet_expire_preview.py --node="$nodeId" --sourceids="$sourceids" --localstartdate="$formatted_localstartdate" --localenddate="$formatted_localenddate" --token="$token" --secret="$secret")
                                                sleep 60
                                        done

					echo  "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_manage_jobs.py --job="import" --action="confirm" --token="$token" --secret="$secret" --jobid="$jobid" in 10 seconds. Hit CTRL+C to cancel" | tee -a $log_path
                                       	sleep 10
                                       	python3 solnet_manage_jobs.py --job="import" --action="confirm" --token="$token" --secret="$secret" --jobid="$jobid" 2>&1 | tee -a $log_path
                                       	echo "$(date +'%Y-%m-%d %H:%M:%S') Import Process Completed. " 2>&1 | tee -a $log_path

				fi

			else
				echo  "$(date +'%Y-%m-%d %H:%M:%S') Executing python3 solnet_manage_jobs.py --job="import" --action="confirm" --token="$token" --secret="$secret" --jobid="$jobid" in 10 seconds. Hit CTRL+C to cancel" | tee -a $log_path
                                sleep 10
                                python3 solnet_manage_jobs.py --job="import" --action="confirm" --token="$token" --secret="$secret" --jobid="$jobid" 2>&1 | tee -a $log_path
                                echo "$(date +'%Y-%m-%d %H:%M:%S') Import Process Completed. " 2>&1 | tee -a $log_path

			fi
		else
			echo  "$(date +'%Y-%m-%d %H:%M:%S') Import Process Aborted. Deleting Staged Data. Executing python3 solnet_manage_jobs.py --job="import" --action="delete" --token="$token" --secret="$secret" --jobid="$jobid" in 10 seconds. Hit CTRL+C to cancel" | tee -a $log_path
                        sleep 10
                        python3 solnet_manage_jobs.py --job="import" --action="delete" --token="$token" --secret="$secret" --jobid="$jobid" 2>&1 | tee -a $log_path
		fi
	fi
fi
